/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { Adoption } from "./Adoption";

export class AdoptionFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Adoption> {
    return super.deploy(overrides || {}) as Promise<Adoption>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Adoption {
    return super.attach(address) as Adoption;
  }
  connect(signer: Signer): AdoptionFactory {
    return super.connect(signer) as AdoptionFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Adoption {
    return new Contract(address, _abi, signerOrProvider) as Adoption;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "adopters",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "petId",
        type: "uint256"
      }
    ],
    name: "adopt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAdopters",
    outputs: [
      {
        internalType: "address[16]",
        name: "",
        type: "address[16]"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610221806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633de4eb171461004657806343ae80d3146100875780638588b2c5146100c0575b600080fd5b61004e6100ef565b604051808261020080838360005b8381101561007457818101518382015260200161005c565b5050505090500191505060405180910390f35b6100a46004803603602081101561009d57600080fd5b5035610135565b604080516001600160a01b039092168252519081900360200190f35b6100dd600480360360208110156100d657600080fd5b5035610152565b60408051918252519081900360200190f35b6100f76101cc565b604080516102008101918290529060009060109082845b81546001600160a01b0316815260019091019060200180831161010e575050505050905090565b6000816010811061014257fe5b01546001600160a01b0316905081565b6000600f82111561019b576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081c195d081a5960921b604482015290519081900360640190fd5b33600083601081106101a957fe5b0180546001600160a01b0319166001600160a01b03929092169190911790555090565b604051806102000160405280601090602082028036833750919291505056fea264697066735822122021b8f5cfe85ac32bdfafdab0013f2cee870bcf2a16e2d363cf49e0b6b03864c664736f6c63430007000033";
